// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_msgs_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LiderManagementClient is the client API for LiderManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiderManagementClient interface {
	Enviarjugada(ctx context.Context, in *Jugada, opts ...grpc.CallOption) (*Respuestalider, error)
	PeticionJugar(ctx context.Context, in *Peticion, opts ...grpc.CallOption) (*RespuestaPeticion, error)
}

type liderManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewLiderManagementClient(cc grpc.ClientConnInterface) LiderManagementClient {
	return &liderManagementClient{cc}
}

func (c *liderManagementClient) Enviarjugada(ctx context.Context, in *Jugada, opts ...grpc.CallOption) (*Respuestalider, error) {
	out := new(Respuestalider)
	err := c.cc.Invoke(ctx, "/msgs.LiderManagement/Enviarjugada", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liderManagementClient) PeticionJugar(ctx context.Context, in *Peticion, opts ...grpc.CallOption) (*RespuestaPeticion, error) {
	out := new(RespuestaPeticion)
	err := c.cc.Invoke(ctx, "/msgs.LiderManagement/PeticionJugar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiderManagementServer is the server API for LiderManagement service.
// All implementations must embed UnimplementedLiderManagementServer
// for forward compatibility
type LiderManagementServer interface {
	Enviarjugada(context.Context, *Jugada) (*Respuestalider, error)
	PeticionJugar(context.Context, *Peticion) (*RespuestaPeticion, error)
	mustEmbedUnimplementedLiderManagementServer()
}

// UnimplementedLiderManagementServer must be embedded to have forward compatible implementations.
type UnimplementedLiderManagementServer struct {
}

func (UnimplementedLiderManagementServer) Enviarjugada(context.Context, *Jugada) (*Respuestalider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enviarjugada not implemented")
}
func (UnimplementedLiderManagementServer) PeticionJugar(context.Context, *Peticion) (*RespuestaPeticion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeticionJugar not implemented")
}
func (UnimplementedLiderManagementServer) mustEmbedUnimplementedLiderManagementServer() {}

// UnsafeLiderManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiderManagementServer will
// result in compilation errors.
type UnsafeLiderManagementServer interface {
	mustEmbedUnimplementedLiderManagementServer()
}

func RegisterLiderManagementServer(s grpc.ServiceRegistrar, srv LiderManagementServer) {
	s.RegisterService(&LiderManagement_ServiceDesc, srv)
}

func _LiderManagement_Enviarjugada_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jugada)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiderManagementServer).Enviarjugada(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msgs.LiderManagement/Enviarjugada",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiderManagementServer).Enviarjugada(ctx, req.(*Jugada))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiderManagement_PeticionJugar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Peticion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiderManagementServer).PeticionJugar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msgs.LiderManagement/PeticionJugar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiderManagementServer).PeticionJugar(ctx, req.(*Peticion))
	}
	return interceptor(ctx, in, info, handler)
}

// LiderManagement_ServiceDesc is the grpc.ServiceDesc for LiderManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiderManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msgs.LiderManagement",
	HandlerType: (*LiderManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enviarjugada",
			Handler:    _LiderManagement_Enviarjugada_Handler,
		},
		{
			MethodName: "PeticionJugar",
			Handler:    _LiderManagement_PeticionJugar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msgs/msgs.proto",
}
